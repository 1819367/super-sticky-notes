{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\porte\\\\Desktop\\\\super-sticky-notes\\\\src\\\\NotesList.js\";\nimport React from \"react\";\nimport Note from \"./Note\";\nconst NotesList = props => {\n  /*filter method needs a callback function */\n  const keepSearchMatches = note => note.doesMatchSearch === true;\n  /*this is the filter method of props.note */\n  const searchMatches = props.notes.filter(keepSearchMatches);\n\n  /*call back function needed to map.  Need to add the key and note property inside the Note componenet*/\n  const renderNote = note => /*#__PURE__*/React.createElement(Note, {\n    onType: props,\n    note: note,\n    key: note.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 34\n    }\n  });\n  /*new variable to map over props.notes array and render it via the call back function*/\n  /*don't map over all notes (props.notes) but those that doesMatchSearch === true */\n  const noteElements = searchMatches.map(renderNote);\n  return /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"notes-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, console.log(props.notes), noteElements);\n};\n_c = NotesList;\nexport default NotesList;\nvar _c;\n$RefreshReg$(_c, \"NotesList\");","map":{"version":3,"names":["React","Note","NotesList","props","keepSearchMatches","note","doesMatchSearch","searchMatches","notes","filter","renderNote","createElement","onType","key","id","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","noteElements","map","className","console","log","_c","$RefreshReg$"],"sources":["C:/Users/porte/Desktop/super-sticky-notes/src/NotesList.js"],"sourcesContent":["import React from \"react\";\r\nimport Note from \"./Note\";\r\n\r\nconst NotesList = (props) => {\r\n    /*filter method needs a callback function */\r\n    const keepSearchMatches = (note) => note.doesMatchSearch === true;\r\n    /*this is the filter method of props.note */\r\n    const searchMatches = props.notes.filter(keepSearchMatches);\r\n\r\n    /*call back function needed to map.  Need to add the key and note property inside the Note componenet*/\r\n    const renderNote = (note) => <Note onType={props} note={note} key={note.id}/>\r\n    /*new variable to map over props.notes array and render it via the call back function*/\r\n    /*don't map over all notes (props.notes) but those that doesMatchSearch === true */\r\n    const noteElements = searchMatches.map(renderNote)\r\n    \r\n    return (\r\n    <ul className=\"notes-list\">\r\n        {console.log(props.notes)}\r\n        {noteElements}\r\n        {/*<Note /> these are no longer needed bc {noteElement}\r\n        <Note />\r\n        <Note />*/}\r\n    </ul>\r\n);\r\n}\r\n\r\nexport default NotesList;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AAEzB,MAAMC,SAAS,GAAIC,KAAK,IAAK;EACzB;EACA,MAAMC,iBAAiB,GAAIC,IAAI,IAAKA,IAAI,CAACC,eAAe,KAAK,IAAI;EACjE;EACA,MAAMC,aAAa,GAAGJ,KAAK,CAACK,KAAK,CAACC,MAAM,CAACL,iBAAiB,CAAC;;EAE3D;EACA,MAAMM,UAAU,GAAIL,IAAI,iBAAKL,KAAA,CAAAW,aAAA,CAACV,IAAI;IAACW,MAAM,EAAET,KAAM;IAACE,IAAI,EAAEA,IAAK;IAACQ,GAAG,EAAER,IAAI,CAACS,EAAG;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAC,CAAC;EAC7E;EACA;EACA,MAAMC,YAAY,GAAGd,aAAa,CAACe,GAAG,CAACZ,UAAU,CAAC;EAElD,oBACAV,KAAA,CAAAW,aAAA;IAAIY,SAAS,EAAC,YAAY;IAAAR,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACrBI,OAAO,CAACC,GAAG,CAACtB,KAAK,CAACK,KAAK,CAAC,EACxBa,YAID,CAAC;AAET,CAAC;AAAAK,EAAA,GArBKxB,SAAS;AAuBf,eAAeA,SAAS;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}